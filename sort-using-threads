/*
 * muttithreadedsort.c
 *
 *  Created on: Jul 3, 2015
 *      Author: bhargav
 */
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <pthread.h>

typedef struct			//Global struct to save array and the size of array
{
int size;
int array[100];
}data_t;
data_t data;			//instance of the array

typedef struct{
	int start;
	int stop;
}parameters_t;			//struct to pass the beginning and ending address of sub arrays to the sorting thread.

void *sorter(void *p);
void *merger(void *p);

int main(int argc, char *argv[])
{
	pthread_attr_t attr;		//variable to store the attributes of thread.
	pthread_t tid1,tid2,tid3;	//variables to store thread ID's

	fprintf(stdout,"Enter number of elements in array\n");
	fscanf(stdin,"%d",&data.size);	//read array
	int i;
	printf("Enter elemtnts of array\n");
	for(i = 0; i < data.size; i++)
	{
		fscanf(stdin,"%d",&data.array[i]);	//scan array
	}
	int half = data.size /2;	//variable to store the mid index value

	parameters_t *para_1 = (parameters_t *)malloc(sizeof(parameters_t));	//Parameters for the first sort thread
	para_1->start = 0;
	para_1->stop = half;

	parameters_t *para_2 = (parameters_t *)malloc(sizeof(parameters_t));	//Parameters for the second sort thread
	para_2->start = half;
	para_2->stop = data.size;

	pthread_attr_init(&attr);

	pthread_create(&tid1,&attr,sorter,para_1);	//create sort thread 1
	pthread_create(&tid2,&attr,sorter,para_2);	//create sort thread 2

	pthread_join(tid1,NULL);		//wait for the first sort thread to complete
	pthread_join(tid2,NULL);		//wait for the second sort thread to complete


	printf("Before merging\n");		//print the array before merging. at this point the array should have two sorted arrays.
	for(i=0 ; i< data.size; i++)
		{
			fprintf(stdout, "%d \t",data.array[i]);
		}
	printf("\n");

	pthread_create(&tid3,&attr,merger,&half);	//create merge thread
	pthread_join(tid3,NULL);			//wait for merge thread to complete

	printf("After merging\n");
	for(i=0 ; i< data.size; i++)		//print the completed thread
	{
		fprintf(stdout, "%d \t",data.array[i]);
	}
	return 0;
}

void *merger(void *p)
{
	int *half = (int *)p;	//pointer which will point to the end of one sorted array and beginning of the other sorted array
	int i,j,k;
	int local_data[data.size];	//local array which will hold the 2 sorted arrays before merging

	for(i=0 ; i< data.size; i++)	//copying the sorted array to the local array.
		{
			local_data[i] = data.array[i];
		}
	i = 0;
	j = *half;
	k = 0;

		while(i < *half && j < data.size)	//merging starts from here
	{
		if(local_data[i] < local_data[j])	//compare the first element of both sorted sub arrays
		{
		data.array[k] = local_data[i];		//first element of the sorted array will be smallest of the 2 sub arrays.
		i++;
		}
		else
		{
			data.array[k] = local_data[j];
			j++;
		}
	k++;
	}

	while(i<*half)		//If first sub array is longer than the second then we need to append the remaining elements to the end of the final merged array
	{

		data.array[k] = local_data[i];
		i++;
		k++;
	}
	while(j<data.size)	//If second sub array is longer than the first then we need to append the remaining elements to the end of the final merged array
	{
		data.array[k] = local_data[j];
		j++;
		k++;
	}
	return 0;
}

void *sorter(void *p)
{
	parameters_t *a = (parameters_t *)p;	//pointer to the parameters required for sorting
	int temp = 0,temp1 = 0;
	int stop = a->stop;					//ending index of the array to be sorted
	int start = a->start;				//starting index of the array to be sorted
	int i,j,small_index,flag;

										//bubble sort to sort the array
	for(j = start; j < (stop); j++)
	{
		temp = data.array[j];
		for(i = (start +1); i < stop; i++)
	{

		if(data.array[i] < temp)
			{
			temp = data.array[i];
			small_index = i;
			temp1 =data.array[j];
			data.array[j] = temp;
			data.array[small_index] = temp1;
			}
	}

		start +=1;

	}
	return 0;
}
